package com.toyodo.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.toyodo.dao.EmployeeDAO;
import com.toyodo.model.Employee;
import com.toyodo.model.Invoice;
import com.toyodo.model.Order;
import com.toyodo.model.Products;
import com.toyodo.model.Quote;
import com.toyodo.utils.DBConnection;

/*
 * @author JAVATAR
 * */

public class EmployeeDAOImpl implements EmployeeDAO {
	private static EmployeeDAOImpl employeeDAOImpl;
	private Connection con;
	private PreparedStatement ps;
	private ResultSet rs;

	private List<Order> listOrder = new ArrayList<Order>();
	private List<Products> listProducts = new ArrayList<Products>();
	private List<Quote> listQuote = new ArrayList<Quote>();
	private List<Invoice> viewInvoice = new ArrayList<Invoice>();

	public static EmployeeDAOImpl createObject() {
		if (employeeDAOImpl == null) {
			synchronized (EmployeeDAOImpl.class) {
				employeeDAOImpl = new EmployeeDAOImpl();
			}
		}
		return employeeDAOImpl;
	}

	@Override
	public void createConnection() {
		con = DBConnection.createConnection();
	}

	@Override
	public String employeeLogin(Employee employeeLogin) {
		createConnection();
		String credential = "invalid";
		try {
			String strlogin = "SELECT * FROM `employee` WHERE `employee_id` = ? AND `password` = ?";
			ps = con.prepareStatement(strlogin);
			ps.setString(1, employeeLogin.getEmployee_id());
			ps.setString(2, employeeLogin.getPassword());
			rs = ps.executeQuery();
			if (rs.next())
				credential = "valid";
		} catch (SQLException sqlex) {
			System.out.println(sqlex);
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return credential;
	}

	@Override
	public List<Order> listOrder() {
		createConnection();
//		clear the previous record on every request to avoid appending previous list of orders
		if (!listOrder.isEmpty())
			listOrder.clear();

		PreparedStatement ps = null;
		ResultSet rs = null;
		Order order = null;
		final String strsql = "SELECT * FROM `order`";
		try {
			ps = con.prepareStatement(strsql);
			rs = ps.executeQuery();
			while (rs.next()) {
				order = new Order(rs.getString("order_id"), rs.getDate("order_date"), rs.getString("customer_id"),
						rs.getString("customer_name"), rs.getString("customer_shipping_address"),
						rs.getString("list_of_products"), rs.getDouble("total_order_value"),
						rs.getDouble("shipping_cost"), rs.getString("shipping_agency"), rs.getString("status"));
				listOrder.add(order);
			}
		} catch (SQLException sqlex) {
			System.out.println(sqlex);
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return listOrder;
	}

	@Override
	public int addOrder(Order order) {
		createConnection();
		PreparedStatement ps = null;
		ResultSet rs = null;
		final String strsql = "INSERT INTO `order`(`order_date`, `customer_id`, `customer_name`, `customer_shipping_address`, `list_of_products`, `total_order_value`, `shipping_cost`, `shipping_agency`, `status`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
		try {
			ps = con.prepareStatement(strsql);
			ps.setDate(1, order.getOrder_date());
			ps.setString(2, order.getCustomer_id());
			ps.setString(3, order.getCustomer_name());
			ps.setString(4, order.getCustomer_shipping_address());
			ps.setString(5, order.getList_of_products());
			ps.setDouble(6, order.getTotal_order_value());
			ps.setDouble(7, order.getShipping_cost());
			ps.setString(8, order.getShipping_agency());
			ps.setString(9, order.getStatus());
			System.out.println(ps);
			if (ps.executeUpdate() > 0) {
				return 1;
			}
		} catch (SQLException sqlex) {
			System.out.println(sqlex);
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return 0;
	}

	@Override
	public List<Products> listProducts() {
		createConnection();
//		clear the previous record on every request to avoid appending list of orders
		if (!listProducts.isEmpty())
			listProducts.clear();

		PreparedStatement ps = null;
		ResultSet rs = null;
		Products product = null;
		final String strsql = "SELECT * FROM `products`";
		try {
			ps = con.prepareStatement(strsql);
			rs = ps.executeQuery();
			while (rs.next()) {
				product = new Products(rs.getString("product_id"), rs.getString("name"), rs.getDouble("price"),
						rs.getString("category"));
				listProducts.add(product);
			}
		} catch (SQLException sqlex) {
			System.out.println(sqlex);
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return listProducts;
	}


	@Override
	public int createQuote(Quote quote) {
		createConnection();
		PreparedStatement ps = null;
		ResultSet rs = null;
		final String strsql = "INSERT INTO `quote` (`order_date`, `customer_id`, `customer_name`, `customer_gst_no`, `customer_shipping_address`, `customer_city`, `customer_phone_number`, `customer_email`, `customer_pincode`, `shipping_cost`, `total_order_value`, `status`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		try {
			ps = con.prepareStatement(strsql);
			ps.setDate(1, quote.getOrder_date());
			ps.setString(2, quote.getCustomer_id());
			ps.setString(3, quote.getCustomer_name());
			ps.setString(4, quote.getCustomer_gst_no());
			ps.setString(5, quote.getCustomer_shipping_address());
			ps.setString(6, quote.getCustomer_city());
			ps.setString(7, quote.getCustomer_phone_number());
			ps.setString(8, quote.getCustomer_email());
			ps.setInt(9, quote.getCustomer_pincode());
			ps.setDouble(10, quote.getShipping_cost());
			ps.setDouble(11, quote.getTotal_order_value());
			ps.setString(12, quote.getStatus());
			System.out.println(ps);
			if (ps.executeUpdate() > 0) {
				return 1;
			}
		} catch (SQLException sqlex) {
			System.out.println(sqlex);
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return 0;
	}

	@Override
	public List<Quote> viewQuote() {
		createConnection();
//		clear the previous record on every request to avoid appending list of orders
		if (!listQuote.isEmpty())
			listQuote.clear();

		PreparedStatement ps = null;
		ResultSet rs = null;
		Quote quote = null;
		final String strsql = "SELECT * FROM `quote`";
		try {
			ps = con.prepareStatement(strsql);
			rs = ps.executeQuery();
			while (rs.next()) {
				quote = new Quote(rs.getDate("order_date"), rs.getString("customer_id"), rs.getString("customer_name"),
						rs.getString("customer_gst_no"), rs.getString("customer_shipping_address"),
						rs.getString("customer_city"), rs.getString("customer_phone_number"),
						rs.getString("customer_email"), rs.getInt("customer_pincode"), rs.getDouble("shipping_cost"),
						rs.getDouble("total_order_value"), rs.getString("status"));
				listQuote.add(quote);
			}
		} catch (SQLException sqlex) {
			System.out.println(sqlex);
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return listQuote;
	}

	@Override
	public int createInvoice(Invoice invoice) {
		createConnection();
		PreparedStatement ps = null;
		ResultSet rs = null;
		final String strsql = "INSERT INTO `invoice` (`invoice_date`, `order_id`, `customer_id`, `customer_name`, `list_of_products_with_gst`, `type_of_gst`, `total_gst_amount`, `total_invoice_value`, `status`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
		try {
			ps = con.prepareStatement(strsql);
			ps.setDate(1, invoice.getInvoiceDate());
			ps.setString(2, invoice.getOrderID());
			ps.setString(3, invoice.getCustomerID());
			ps.setString(4, invoice.getCustomerName());
			ps.setString(5, invoice.getListOfProductsWithGST());
			ps.setString(6, invoice.getTypeOfGST());
			ps.setDouble(7, invoice.getTotalGSTAmount());
			ps.setDouble(8, invoice.getTotalInvoiceValue());
			ps.setString(9, invoice.getStatus());
			System.out.println(ps);
			if (ps.executeUpdate() > 0) {
				return 1;
			}
		} catch (SQLException sqlex) {
			System.out.println(sqlex);
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return 0;
	}

	@Override
	public List<Invoice> viewInvoice() {
		createConnection();
//		clear the previous record on every request to avoid appending list of orders
		if (!viewInvoice.isEmpty())
			viewInvoice.clear();

		PreparedStatement ps = null;
		ResultSet rs = null;
		Invoice invoice = null;
		final String strsql = "SELECT * FROM `invoice`";
		try {
			ps = con.prepareStatement(strsql);
			rs = ps.executeQuery();
			while (rs.next()) {
				invoice = new Invoice(rs.getInt("invoice_id"), rs.getDate("invoice_date"), rs.getString("order_id"),
						rs.getString("customer_id"), rs.getString("customer_name"),
						rs.getString("list_of_products_with_gst"), rs.getString("type_of_gst"),
						rs.getDouble("total_gst_amount"), rs.getDouble("total_invoice_value"), rs.getString("status"));
				viewInvoice.add(invoice);
			}
		} catch (SQLException sqlex) {
			System.out.println(sqlex);
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return viewInvoice;
	}

	@Override
	public void closeConnection() {
		if (ps != null) {
			try {
				ps.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		if (rs != null) {
			try {
				rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}


}
